<ResourceDictionary xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:c="using:TextHighlighting.Controls">

    <!--  Copied TextBox ControlTheme that replaced TextPresenter with HighlightingTextPresenter  -->
    <!--  Can't use BasedOn because the base theme has selectors that targets TextBox pseudoclasses  -->
    <ControlTheme x:Key="{x:Type c:TextHighlightBox}" TargetType="c:TextHighlightBox">
        <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}" />
        <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="MinHeight" Value="{DynamicResource TextControlThemeMinHeight}" />
        <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
        <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
        <Setter Property="ContextFlyout" Value="{OnFormFactor Desktop={StaticResource DefaultTextBoxContextFlyout}, Mobile={StaticResource HorizontalTextBoxContextFlyout}}" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border Name="PART_BorderElement" MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter Grid.Column="0" Grid.ColumnSpan="1" Content="{TemplateBinding InnerLeftContent}" />
                                <DockPanel x:Name="PART_InnerDockPanel" Grid.Column="1" Grid.ColumnSpan="1" Margin="{TemplateBinding Padding}">
                                    <TextBlock Name="PART_FloatingWatermark" DockPanel.Dock="Top" Foreground="{DynamicResource SystemAccentColor}"
                                        IsVisible="False" Text="{TemplateBinding Watermark}" />
                                    <ScrollViewer Name="PART_ScrollViewer" AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                        BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock Name="PART_Watermark" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0.5"
                                                Text="{TemplateBinding Watermark}" TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding Converter="{x:Static StringConverters.IsNullOrEmpty}" ElementName="PART_TextPresenter" Path="PreeditText" />
                                                        <Binding Converter="{x:Static StringConverters.IsNullOrEmpty}" Path="Text" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <c:HighlightingTextPresenter Name="PART_TextPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                BackgroundHighlight="{TemplateBinding BackgroundHighlight}"
                                                CaretBlinkInterval="{TemplateBinding CaretBlinkInterval}" CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}" LetterSpacing="{TemplateBinding LetterSpacing}"
                                                LineHeight="{TemplateBinding LineHeight}" PasswordChar="{TemplateBinding PasswordChar}"
                                                RevealPassword="{TemplateBinding RevealPassword}" SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionForegroundBrush="{TemplateBinding SelectionForegroundBrush}"
                                                SelectionStart="{TemplateBinding SelectionStart}" Text="{TemplateBinding Text, Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                        <ScrollViewer.Styles>
                                            <Style Selector="ScrollContentPresenter#PART_ContentPresenter">
                                                <Setter Property="Cursor" Value="IBeam" />
                                            </Style>
                                        </ScrollViewer.Styles>
                                    </ScrollViewer>
                                </DockPanel>
                                <ContentPresenter Grid.Column="2" Grid.ColumnSpan="1" Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
                <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark, ^ /template/ TextBlock#PART_FloatingWatermark">
                <Setter Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundDisabled}" />
            </Style>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundPointerOver}" />
            </Style>
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus">
            <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextControlPlaceholderForegroundFocused}" />
            </Style>

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
                <Setter Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
                <Setter Property="BorderThickness" Value="{DynamicResource TextControlBorderThemeThicknessFocused}" />
            </Style>
        </Style>

        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource SystemControlErrorTextForegroundBrush}" />
        </Style>

        <Style Selector="^ /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="Cursor" Value="IBeam" />
        </Style>

        <Style Selector="^[UseFloatingWatermark=true]:not(:empty) /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="^.revealPasswordButton[AcceptsReturn=False][IsReadOnly=False]:not(c|TextHighlightBox:empty)">
            <Setter Property="InnerRightContent">
                <Template>
                    <ToggleButton ClipToBounds="True" IsChecked="{Binding $parent[c:TextHighlightBox].RevealPassword, Mode=TwoWay}" Theme="{StaticResource FluentTextBoxToggleButton}">
                        <Panel>
                            <PathIcon Width="12" Height="8" Data="{StaticResource PasswordBoxRevealButtonData}"
                                IsVisible="{Binding !$parent[ToggleButton].IsChecked}" />
                            <PathIcon Width="12" Height="12" Data="{StaticResource PasswordBoxHideButtonData}"
                                IsVisible="{Binding $parent[ToggleButton].IsChecked}" />
                        </Panel>
                    </ToggleButton>
                </Template>
            </Setter>
        </Style>

        <Style Selector="^.clearButton[AcceptsReturn=False][IsReadOnly=False]:focus:not(c|TextHighlightBox:empty)">
            <Setter Property="InnerRightContent">
                <Template>
                    <Button ClipToBounds="True" Command="{Binding $parent[c:TextHighlightBox].Clear}" Theme="{StaticResource FluentTextBoxButton}">
                        <PathIcon Width="10" Height="10" Data="{StaticResource TextBoxClearButtonData}" />
                    </Button>
                </Template>
            </Setter>
        </Style>
    </ControlTheme>
</ResourceDictionary>
